# Here is an explanation for why some of the checks are disabled:
#
#   -google-readability-todo: Currently a single dev project, doesn't make much 
#     sense to format as //TODO: <USER> comment
#
#   --misc-non-private-member-variables-in-classes: We use some getter/setter 
#     methods, but don't want to enforce all member variables having to use getter/setters.
#
#   -modernize-use-trailing-return-type: clang-tidy recommends using
#     `auto Foo() -> std::string { return ...; }`, we think the code is less
#     readable in this form.
#
#   -readability-uppercase-literal-suffix: lower case 'f' for floats is more readable
#

Checks: >
  -*,
  bugprone-*,
  google-*,
  misc-*,
  -misc-non-private-member-variables-in-classes,
  modernize-*,
  -modernize-use-trailing-return-type,
  performance-*,
  portability-*,
  readability-*,
  -readability-uppercase-literal-suffix,  
  -google-readability-todo
  

#Turn most of the specified above warnings into errors


CheckOptions:
  - { key: readability-identifier-naming.NamespaceCase,          value: lower_case }
  - { key: readability-identifier-naming.ClassCase,              value: CamelCase  }
  - { key: readability-identifier-naming.StructCase,             value: CamelCase  }
  - { key: readability-identifier-naming.TemplateParameterCase,  value: CamelCase  }
  - { key: readability-identifier-naming.FunctionCase,           value: CamelCase  }
  - { key: readability-identifier-naming.VariableCase,           value: lower_case }
  - { key: readability-identifier-naming.ClassMemberCase,        value: lower-case }
  - { key: readability-identifier-naming.PrivateMemberCase,      value: lower_case }
  - { key: readability-identifier-naming.ProtectedMemberCase,    value: lower_case }
  - { key: readability-identifier-naming.PublicMemberCase,       value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberSuffix,    value: _          }
  - { key: readability-identifier-naming.EnumConstantCase,         value: UPPER_CASE }
  - { key: readability-identifier-naming.ConstexprVariableCase,    value: UPPER_CASE }
  - { key: readability-identifier-naming.ConstantMemberCase,       value: UPPER_CASE }
  - { key: readability-identifier-naming.GlobalConstantCase,       value: UPPER_CASE }
  - { key: readability-identifier-naming.MemberConstantCase,       value: UPPER_CASE }
  - { key: readability-identifier-naming.StaticConstantCase,       value: UPPER_CASE }
  - { key: readability-implicit-bool-conversion.AllowIntegerConditions,  value: 1   }
  - { key: readability-implicit-bool-conversion.AllowPointerConditions,  value: 1   }